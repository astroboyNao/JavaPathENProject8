
def mapstructVersion =  "1.5.0.Beta2"
def lombokVersion =  "1.18.20"
def lombokMapstructBindingVersion =  "0.2.0"


buildscript {
    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.1")
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

sourceSets.main.java.srcDirs = ['build/generated/sources/annotationProcessor/java/main','src/main/java']

bootJar {
}
jar {
    enabled = true
}
bootRun{

}
build {}
sourceCompatibility = 11
targetCompatibility = 11

configurations {
    externalLibs
    compileOnly {
        extendsFrom annotationProcessor
    }
}
compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}
group = 'com.tripmaster.tourguide'
version = '0.0.1-SNAPSHOT'

dependencies {

    implementation  'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.apache.commons:commons-lang3:3.6'

    implementation "org.javamoney:moneta:1.3"
    implementation 'com.google.guava:guava:11.0.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE') {
        exclude group: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation('org.springframework.security:spring-security-test')
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.3.2')
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.1'

    compileOnly 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.mapstruct:mapstruct'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation  "org.mapstruct:mapstruct:${mapstructVersion}",  "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor  "org.mapstruct:mapstruct-processor:${mapstructVersion}",  "org.projectlombok:lombok:${lombokVersion}",  "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"


}

test {
    useJUnitPlatform()

}


jacoco {
    toolVersion = "0.8.6"

}

jacocoTestReport {

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/tourguide/application/*.*',
                    'com/tourguide/infrastructure/entities/**',
                    'com/tourguide/infrastructure/mapper/**',
                    'com/tourguide/infrastructure/config/'])
        }))
    }
}


jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/tourguide/application/*.*',
                    'com/tourguide/infrastructure/entities/**',
                    'com/tourguide/infrastructure/mapper/**',
                    'com/tourguide/infrastructure/config/'])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}
